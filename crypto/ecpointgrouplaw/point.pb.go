// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/getamis/alice/crypto/ecpointgrouplaw/point.proto

package ecpointgrouplaw

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EcPointMessage_Curve int32

const (
	EcPointMessage_P224 EcPointMessage_Curve = 0
	EcPointMessage_P256 EcPointMessage_Curve = 1
	EcPointMessage_P384 EcPointMessage_Curve = 2
	EcPointMessage_S256 EcPointMessage_Curve = 3
)

var EcPointMessage_Curve_name = map[int32]string{
	0: "P224",
	1: "P256",
	2: "P384",
	3: "S256",
}

var EcPointMessage_Curve_value = map[string]int32{
	"P224": 0,
	"P256": 1,
	"P384": 2,
	"S256": 3,
}

func (x EcPointMessage_Curve) String() string {
	return proto.EnumName(EcPointMessage_Curve_name, int32(x))
}

func (EcPointMessage_Curve) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe56a91083920431, []int{0, 0}
}

type EcPointMessage struct {
	Curve                EcPointMessage_Curve `protobuf:"varint,1,opt,name=curve,proto3,enum=ecpointgrouplaw.EcPointMessage_Curve" json:"curve,omitempty"`
	X                    []byte               `protobuf:"bytes,2,opt,name=x,proto3" json:"x,omitempty"`
	Y                    []byte               `protobuf:"bytes,3,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EcPointMessage) Reset()         { *m = EcPointMessage{} }
func (m *EcPointMessage) String() string { return proto.CompactTextString(m) }
func (*EcPointMessage) ProtoMessage()    {}
func (*EcPointMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe56a91083920431, []int{0}
}

func (m *EcPointMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EcPointMessage.Unmarshal(m, b)
}
func (m *EcPointMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EcPointMessage.Marshal(b, m, deterministic)
}
func (m *EcPointMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EcPointMessage.Merge(m, src)
}
func (m *EcPointMessage) XXX_Size() int {
	return xxx_messageInfo_EcPointMessage.Size(m)
}
func (m *EcPointMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EcPointMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EcPointMessage proto.InternalMessageInfo

func (m *EcPointMessage) GetCurve() EcPointMessage_Curve {
	if m != nil {
		return m.Curve
	}
	return EcPointMessage_P224
}

func (m *EcPointMessage) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *EcPointMessage) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func init() {
	proto.RegisterEnum("ecpointgrouplaw.EcPointMessage_Curve", EcPointMessage_Curve_name, EcPointMessage_Curve_value)
	proto.RegisterType((*EcPointMessage)(nil), "ecpointgrouplaw.EcPointMessage")
}

func init() {
	proto.RegisterFile("github.com/getamis/alice/crypto/ecpointgrouplaw/point.proto", fileDescriptor_fe56a91083920431)
}

var fileDescriptor_fe56a91083920431 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4e, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x4f, 0x2d, 0x49, 0xcc, 0xcd, 0x2c, 0xd6, 0x4f,
	0xcc, 0xc9, 0x4c, 0x4e, 0xd5, 0x4f, 0x2e, 0xaa, 0x2c, 0x28, 0xc9, 0xd7, 0x4f, 0x4d, 0x2e, 0xc8,
	0xcf, 0xcc, 0x2b, 0x49, 0x2f, 0xca, 0x2f, 0x2d, 0xc8, 0x49, 0x2c, 0xd7, 0x07, 0xf3, 0xf4, 0x0a,
	0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xf8, 0xd1, 0x24, 0x95, 0x66, 0x31, 0x72, 0xf1, 0xb9, 0x26, 0x07,
	0x80, 0xc4, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0xac, 0xb9, 0x58, 0x93, 0x4b, 0x8b,
	0xca, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x54, 0xf5, 0xd0, 0xf4, 0xe8, 0xa1, 0xaa,
	0xd7, 0x73, 0x06, 0x29, 0x0e, 0x82, 0xe8, 0x11, 0xe2, 0xe1, 0x62, 0xac, 0x90, 0x60, 0x52, 0x60,
	0xd4, 0xe0, 0x09, 0x62, 0xac, 0x00, 0xf1, 0x2a, 0x25, 0x98, 0x21, 0xbc, 0x4a, 0x25, 0x7d, 0x2e,
	0x56, 0xb0, 0x5a, 0x21, 0x0e, 0x2e, 0x96, 0x00, 0x23, 0x23, 0x13, 0x01, 0x06, 0x08, 0xcb, 0xd4,
	0x4c, 0x80, 0x11, 0xcc, 0x32, 0xb6, 0x30, 0x11, 0x60, 0x02, 0xb1, 0x82, 0x41, 0x62, 0xcc, 0x49,
	0x6c, 0x60, 0x47, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x68, 0x8d, 0xaa, 0xf3, 0x00,
	0x00, 0x00,
}
