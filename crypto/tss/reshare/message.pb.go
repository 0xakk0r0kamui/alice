// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/getamis/alice/crypto/tss/reshare/message.proto

package reshare

import (
	fmt "fmt"
	commitment "github.com/getamis/alice/crypto/commitment"
	zkproof "github.com/getamis/alice/crypto/zkproof"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	Type_Commit Type = 0
	Type_Verify Type = 1
	Type_Result Type = 2
)

var Type_name = map[int32]string{
	0: "Commit",
	1: "Verify",
	2: "Result",
}

var Type_value = map[string]int32{
	"Commit": 0,
	"Verify": 1,
	"Result": 2,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b20ef4ba92a5944f, []int{0}
}

type Message struct {
	Type Type   `protobuf:"varint,1,opt,name=type,proto3,enum=reshare.Type" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*Message_Commit
	//	*Message_Verify
	//	*Message_Result
	Body                 isMessage_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ef4ba92a5944f, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_Commit
}

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isMessage_Body interface {
	isMessage_Body()
}

type Message_Commit struct {
	Commit *BodyCommit `protobuf:"bytes,3,opt,name=commit,proto3,oneof"`
}

type Message_Verify struct {
	Verify *BodyVerify `protobuf:"bytes,4,opt,name=verify,proto3,oneof"`
}

type Message_Result struct {
	Result *BodyResult `protobuf:"bytes,5,opt,name=result,proto3,oneof"`
}

func (*Message_Commit) isMessage_Body() {}

func (*Message_Verify) isMessage_Body() {}

func (*Message_Result) isMessage_Body() {}

func (m *Message) GetBody() isMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Message) GetCommit() *BodyCommit {
	if x, ok := m.GetBody().(*Message_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Message) GetVerify() *BodyVerify {
	if x, ok := m.GetBody().(*Message_Verify); ok {
		return x.Verify
	}
	return nil
}

func (m *Message) GetResult() *BodyResult {
	if x, ok := m.GetBody().(*Message_Result); ok {
		return x.Result
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Commit)(nil),
		(*Message_Verify)(nil),
		(*Message_Result)(nil),
	}
}

type BodyCommit struct {
	PointCommitment      *commitment.PointCommitmentMessage `protobuf:"bytes,1,opt,name=pointCommitment,proto3" json:"pointCommitment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *BodyCommit) Reset()         { *m = BodyCommit{} }
func (m *BodyCommit) String() string { return proto.CompactTextString(m) }
func (*BodyCommit) ProtoMessage()    {}
func (*BodyCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ef4ba92a5944f, []int{1}
}

func (m *BodyCommit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BodyCommit.Unmarshal(m, b)
}
func (m *BodyCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BodyCommit.Marshal(b, m, deterministic)
}
func (m *BodyCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodyCommit.Merge(m, src)
}
func (m *BodyCommit) XXX_Size() int {
	return xxx_messageInfo_BodyCommit.Size(m)
}
func (m *BodyCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_BodyCommit.DiscardUnknown(m)
}

var xxx_messageInfo_BodyCommit proto.InternalMessageInfo

func (m *BodyCommit) GetPointCommitment() *commitment.PointCommitmentMessage {
	if m != nil {
		return m.PointCommitment
	}
	return nil
}

type BodyVerify struct {
	Verify               *commitment.FeldmanVerifyMessage `protobuf:"bytes,1,opt,name=verify,proto3" json:"verify,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *BodyVerify) Reset()         { *m = BodyVerify{} }
func (m *BodyVerify) String() string { return proto.CompactTextString(m) }
func (*BodyVerify) ProtoMessage()    {}
func (*BodyVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ef4ba92a5944f, []int{2}
}

func (m *BodyVerify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BodyVerify.Unmarshal(m, b)
}
func (m *BodyVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BodyVerify.Marshal(b, m, deterministic)
}
func (m *BodyVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodyVerify.Merge(m, src)
}
func (m *BodyVerify) XXX_Size() int {
	return xxx_messageInfo_BodyVerify.Size(m)
}
func (m *BodyVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_BodyVerify.DiscardUnknown(m)
}

var xxx_messageInfo_BodyVerify proto.InternalMessageInfo

func (m *BodyVerify) GetVerify() *commitment.FeldmanVerifyMessage {
	if m != nil {
		return m.Verify
	}
	return nil
}

type BodyResult struct {
	SiGProofMsg          *zkproof.SchnorrProofMessage `protobuf:"bytes,1,opt,name=siGProofMsg,proto3" json:"siGProofMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *BodyResult) Reset()         { *m = BodyResult{} }
func (m *BodyResult) String() string { return proto.CompactTextString(m) }
func (*BodyResult) ProtoMessage()    {}
func (*BodyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ef4ba92a5944f, []int{3}
}

func (m *BodyResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BodyResult.Unmarshal(m, b)
}
func (m *BodyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BodyResult.Marshal(b, m, deterministic)
}
func (m *BodyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodyResult.Merge(m, src)
}
func (m *BodyResult) XXX_Size() int {
	return xxx_messageInfo_BodyResult.Size(m)
}
func (m *BodyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BodyResult.DiscardUnknown(m)
}

var xxx_messageInfo_BodyResult proto.InternalMessageInfo

func (m *BodyResult) GetSiGProofMsg() *zkproof.SchnorrProofMessage {
	if m != nil {
		return m.SiGProofMsg
	}
	return nil
}

func init() {
	proto.RegisterEnum("reshare.Type", Type_name, Type_value)
	proto.RegisterType((*Message)(nil), "reshare.Message")
	proto.RegisterType((*BodyCommit)(nil), "reshare.BodyCommit")
	proto.RegisterType((*BodyVerify)(nil), "reshare.BodyVerify")
	proto.RegisterType((*BodyResult)(nil), "reshare.BodyResult")
}

func init() {
	proto.RegisterFile("github.com/getamis/alice/crypto/tss/reshare/message.proto", fileDescriptor_b20ef4ba92a5944f)
}

var fileDescriptor_b20ef4ba92a5944f = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4d, 0x4b, 0xc3, 0x30,
	0x1c, 0xc6, 0xd7, 0x5a, 0x3b, 0xcc, 0x70, 0x8e, 0x78, 0x29, 0xc3, 0x43, 0xed, 0x69, 0x0c, 0x4c,
	0x61, 0x22, 0xcc, 0x8b, 0x87, 0x0d, 0xa6, 0x87, 0x0d, 0x46, 0x15, 0x0f, 0xde, 0xba, 0x36, 0xeb,
	0x82, 0x6b, 0x53, 0x92, 0x4c, 0xa8, 0xdf, 0xd2, 0x6f, 0x24, 0xe9, 0x3f, 0xee, 0x45, 0x06, 0xbb,
	0x85, 0x3c, 0xbf, 0xe7, 0xf9, 0xbf, 0xa1, 0xc7, 0x8c, 0xa9, 0xd5, 0x66, 0x41, 0x12, 0x9e, 0x87,
	0x19, 0x55, 0x71, 0xce, 0x64, 0x18, 0xaf, 0x59, 0x42, 0xc3, 0x44, 0x54, 0xa5, 0xe2, 0xa1, 0x92,
	0x32, 0x14, 0x54, 0xae, 0x62, 0x41, 0xc3, 0x9c, 0x4a, 0x19, 0x67, 0x94, 0x94, 0x82, 0x2b, 0x8e,
	0x9b, 0xe6, 0xbb, 0x3b, 0x3c, 0x95, 0x91, 0xf0, 0x3c, 0x67, 0x2a, 0xa7, 0x85, 0x3a, 0x8c, 0xe8,
	0x3e, 0x9c, 0x72, 0x7e, 0x7f, 0x96, 0x82, 0xf3, 0xe5, 0xa1, 0x2d, 0xf8, 0xb1, 0x50, 0x73, 0x06,
	0x3f, 0xf8, 0x16, 0x39, 0xaa, 0x2a, 0xa9, 0x67, 0xf9, 0x56, 0xaf, 0x3d, 0xb8, 0x24, 0xa6, 0x29,
	0xf2, 0x56, 0x95, 0x34, 0xaa, 0x25, 0xdc, 0x46, 0x36, 0x4b, 0x3d, 0xdb, 0xb7, 0x7a, 0x17, 0x91,
	0xcd, 0x52, 0x7c, 0x87, 0x5c, 0xe8, 0xc8, 0x3b, 0xf3, 0xad, 0x5e, 0x6b, 0x70, 0xbd, 0x35, 0x8d,
	0x78, 0x5a, 0x8d, 0x6b, 0xe9, 0xa5, 0x11, 0x19, 0x48, 0xe3, 0x5f, 0x54, 0xb0, 0x65, 0xe5, 0x39,
	0x47, 0xf0, 0xf7, 0x5a, 0xd2, 0x38, 0x40, 0x1a, 0x17, 0x54, 0x6e, 0xd6, 0xca, 0x3b, 0x3f, 0x82,
	0x47, 0xb5, 0xa4, 0x71, 0x80, 0x46, 0x2e, 0x72, 0x16, 0x3c, 0xad, 0x82, 0x0f, 0x84, 0x76, 0xd5,
	0xf1, 0x14, 0x5d, 0x95, 0x9c, 0x15, 0x6a, 0xbc, 0xdd, 0x5c, 0x3d, 0x60, 0x6b, 0x10, 0x90, 0xdd,
	0x32, 0xc9, 0xfc, 0x10, 0x31, 0x2b, 0x89, 0xfe, 0x5b, 0x83, 0x09, 0x64, 0x43, 0xab, 0x78, 0xb8,
	0x9d, 0x07, 0x22, 0xfd, 0xfd, 0xc8, 0x09, 0x5d, 0xa7, 0x79, 0x5c, 0x00, 0xfa, 0x17, 0x68, 0xf8,
	0x60, 0x0a, 0x39, 0x30, 0x03, 0x7e, 0x42, 0x2d, 0xc9, 0x9e, 0xe7, 0xfa, 0x3e, 0x33, 0x99, 0x99,
	0xb0, 0x1b, 0x62, 0x4e, 0x46, 0x5e, 0x93, 0x55, 0xc1, 0x85, 0x00, 0xdd, 0x04, 0xed, 0x1b, 0xfa,
	0x7d, 0xe4, 0xe8, 0x23, 0x61, 0x84, 0x5c, 0xe8, 0xb5, 0xd3, 0xd0, 0x6f, 0x28, 0xdd, 0xb1, 0xf4,
	0x1b, 0x2a, 0x75, 0xec, 0x85, 0x5b, 0x1f, 0xfe, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc8,
	0x2f, 0x07, 0xaf, 0x02, 0x00, 0x00,
}
