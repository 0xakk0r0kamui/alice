// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/getamis/alice/crypto/commitment/message.proto

package commitment

import (
	fmt "fmt"
	ecpointgrouplaw "github.com/getamis/alice/crypto/ecpointgrouplaw"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// HashCommitmentMessage and HashDecommitmentMessage are for HashCommitment
// HashCommitmentMessage contains the blake2b initial vector and data digest for commitment use
type HashCommitmentMessage struct {
	Blake2BKey           []byte   `protobuf:"bytes,1,opt,name=blake2bKey,proto3" json:"blake2bKey,omitempty"`
	Digest               []byte   `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashCommitmentMessage) Reset()         { *m = HashCommitmentMessage{} }
func (m *HashCommitmentMessage) String() string { return proto.CompactTextString(m) }
func (*HashCommitmentMessage) ProtoMessage()    {}
func (*HashCommitmentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d785704ceb4dbe, []int{0}
}

func (m *HashCommitmentMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashCommitmentMessage.Unmarshal(m, b)
}
func (m *HashCommitmentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashCommitmentMessage.Marshal(b, m, deterministic)
}
func (m *HashCommitmentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashCommitmentMessage.Merge(m, src)
}
func (m *HashCommitmentMessage) XXX_Size() int {
	return xxx_messageInfo_HashCommitmentMessage.Size(m)
}
func (m *HashCommitmentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HashCommitmentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HashCommitmentMessage proto.InternalMessageInfo

func (m *HashCommitmentMessage) GetBlake2BKey() []byte {
	if m != nil {
		return m.Blake2BKey
	}
	return nil
}

func (m *HashCommitmentMessage) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// HashDecommitmentMessage contains original data and salt for decommitment use
type HashDecommitmentMessage struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Salt                 []byte   `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashDecommitmentMessage) Reset()         { *m = HashDecommitmentMessage{} }
func (m *HashDecommitmentMessage) String() string { return proto.CompactTextString(m) }
func (*HashDecommitmentMessage) ProtoMessage()    {}
func (*HashDecommitmentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d785704ceb4dbe, []int{1}
}

func (m *HashDecommitmentMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashDecommitmentMessage.Unmarshal(m, b)
}
func (m *HashDecommitmentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashDecommitmentMessage.Marshal(b, m, deterministic)
}
func (m *HashDecommitmentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashDecommitmentMessage.Merge(m, src)
}
func (m *HashDecommitmentMessage) XXX_Size() int {
	return xxx_messageInfo_HashDecommitmentMessage.Size(m)
}
func (m *HashDecommitmentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HashDecommitmentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HashDecommitmentMessage proto.InternalMessageInfo

func (m *HashDecommitmentMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *HashDecommitmentMessage) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

// PointCommitmentMessage and PointDecommitmentMessage are for PointDecommitment
// PointCommitmentMessage contains rank and its points for commitment use
type PointCommitmentMessage struct {
	Points               []*ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PointCommitmentMessage) Reset()         { *m = PointCommitmentMessage{} }
func (m *PointCommitmentMessage) String() string { return proto.CompactTextString(m) }
func (*PointCommitmentMessage) ProtoMessage()    {}
func (*PointCommitmentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d785704ceb4dbe, []int{2}
}

func (m *PointCommitmentMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PointCommitmentMessage.Unmarshal(m, b)
}
func (m *PointCommitmentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PointCommitmentMessage.Marshal(b, m, deterministic)
}
func (m *PointCommitmentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PointCommitmentMessage.Merge(m, src)
}
func (m *PointCommitmentMessage) XXX_Size() int {
	return xxx_messageInfo_PointCommitmentMessage.Size(m)
}
func (m *PointCommitmentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PointCommitmentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PointCommitmentMessage proto.InternalMessageInfo

func (m *PointCommitmentMessage) GetPoints() []*ecpointgrouplaw.EcPointMessage {
	if m != nil {
		return m.Points
	}
	return nil
}

// FeldmanVerifyMessage contains evaluation for verification use
type FeldmanVerifyMessage struct {
	Evaluation           []byte   `protobuf:"bytes,1,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeldmanVerifyMessage) Reset()         { *m = FeldmanVerifyMessage{} }
func (m *FeldmanVerifyMessage) String() string { return proto.CompactTextString(m) }
func (*FeldmanVerifyMessage) ProtoMessage()    {}
func (*FeldmanVerifyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d785704ceb4dbe, []int{3}
}

func (m *FeldmanVerifyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeldmanVerifyMessage.Unmarshal(m, b)
}
func (m *FeldmanVerifyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeldmanVerifyMessage.Marshal(b, m, deterministic)
}
func (m *FeldmanVerifyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeldmanVerifyMessage.Merge(m, src)
}
func (m *FeldmanVerifyMessage) XXX_Size() int {
	return xxx_messageInfo_FeldmanVerifyMessage.Size(m)
}
func (m *FeldmanVerifyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FeldmanVerifyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FeldmanVerifyMessage proto.InternalMessageInfo

func (m *FeldmanVerifyMessage) GetEvaluation() []byte {
	if m != nil {
		return m.Evaluation
	}
	return nil
}

// PedersenVerifyMessage contains evaluation and salt for verification use
type PedersenVerifyMessage struct {
	Evaluation           []byte   `protobuf:"bytes,1,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	Salt                 []byte   `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PedersenVerifyMessage) Reset()         { *m = PedersenVerifyMessage{} }
func (m *PedersenVerifyMessage) String() string { return proto.CompactTextString(m) }
func (*PedersenVerifyMessage) ProtoMessage()    {}
func (*PedersenVerifyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d785704ceb4dbe, []int{4}
}

func (m *PedersenVerifyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PedersenVerifyMessage.Unmarshal(m, b)
}
func (m *PedersenVerifyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PedersenVerifyMessage.Marshal(b, m, deterministic)
}
func (m *PedersenVerifyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PedersenVerifyMessage.Merge(m, src)
}
func (m *PedersenVerifyMessage) XXX_Size() int {
	return xxx_messageInfo_PedersenVerifyMessage.Size(m)
}
func (m *PedersenVerifyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PedersenVerifyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PedersenVerifyMessage proto.InternalMessageInfo

func (m *PedersenVerifyMessage) GetEvaluation() []byte {
	if m != nil {
		return m.Evaluation
	}
	return nil
}

func (m *PedersenVerifyMessage) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func init() {
	proto.RegisterType((*HashCommitmentMessage)(nil), "commitment.HashCommitmentMessage")
	proto.RegisterType((*HashDecommitmentMessage)(nil), "commitment.HashDecommitmentMessage")
	proto.RegisterType((*PointCommitmentMessage)(nil), "commitment.PointCommitmentMessage")
	proto.RegisterType((*FeldmanVerifyMessage)(nil), "commitment.FeldmanVerifyMessage")
	proto.RegisterType((*PedersenVerifyMessage)(nil), "commitment.PedersenVerifyMessage")
}

func init() {
	proto.RegisterFile("github.com/getamis/alice/crypto/commitment/message.proto", fileDescriptor_17d785704ceb4dbe)
}

var fileDescriptor_17d785704ceb4dbe = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0x4a, 0x0e, 0xa3, 0xa7, 0x60, 0x6b, 0xf0, 0xa0, 0x25, 0xa7, 0x9e, 0xb2, 0x50,
	0x41, 0x05, 0x4f, 0xe2, 0x1f, 0x84, 0x22, 0xd6, 0x1e, 0xbc, 0x4f, 0x36, 0x63, 0xba, 0xb8, 0x9b,
	0x0d, 0xd9, 0x89, 0x92, 0x6f, 0x2f, 0xd9, 0xa6, 0xb6, 0x58, 0x41, 0x7a, 0x9b, 0x79, 0x93, 0xf7,
	0xcb, 0x7b, 0x0b, 0xd7, 0x85, 0xe2, 0x45, 0x93, 0xa5, 0xd2, 0x1a, 0x51, 0x10, 0xa3, 0x51, 0x4e,
	0xa0, 0x56, 0x92, 0x84, 0xac, 0xdb, 0x8a, 0xad, 0x90, 0xd6, 0x18, 0xc5, 0x86, 0x4a, 0x16, 0x86,
	0x9c, 0xc3, 0x82, 0xd2, 0xaa, 0xb6, 0x6c, 0x23, 0x58, 0x5f, 0x4e, 0x6f, 0xfe, 0xa3, 0x90, 0xac,
	0xac, 0x2a, 0xb9, 0xa8, 0x6d, 0x53, 0x69, 0xfc, 0x12, 0x7e, 0x5b, 0x82, 0x92, 0x17, 0x18, 0x3c,
	0xa1, 0x5b, 0xdc, 0xfd, 0xe0, 0x9e, 0x97, 0xff, 0x89, 0xce, 0x00, 0x32, 0x8d, 0x1f, 0x34, 0xc9,
	0xa6, 0xd4, 0xc6, 0xc1, 0x28, 0x18, 0x1f, 0xcd, 0x37, 0x94, 0x68, 0x08, 0x61, 0xae, 0x0a, 0x72,
	0x1c, 0xef, 0xf9, 0x5b, 0xbf, 0x25, 0xb7, 0x70, 0xd2, 0x01, 0xef, 0x49, 0x6e, 0x21, 0x23, 0x38,
	0xc8, 0x91, 0xb1, 0x87, 0xf9, 0xb9, 0xd3, 0x1c, 0xea, 0x15, 0xc4, 0xcf, 0xc9, 0x2b, 0x0c, 0x67,
	0x5d, 0xc4, 0xed, 0x50, 0x57, 0x10, 0xfa, 0xf0, 0x2e, 0x0e, 0x46, 0xfb, 0xe3, 0xc3, 0xc9, 0x79,
	0xfa, 0xab, 0x5b, 0xfa, 0x20, 0xbd, 0xb5, 0x37, 0xcc, 0xfb, 0xcf, 0x93, 0x4b, 0x38, 0x7e, 0x24,
	0x9d, 0x1b, 0x2c, 0xdf, 0xa8, 0x56, 0xef, 0xed, 0x46, 0x4b, 0xfa, 0x44, 0xdd, 0x20, 0x2b, 0x5b,
	0xae, 0x5a, 0xae, 0x95, 0x64, 0x0a, 0x83, 0x19, 0xe5, 0x54, 0x3b, 0xda, 0xcd, 0xf8, 0x57, 0xaf,
	0x2c, 0xf4, 0x4f, 0x7e, 0xf1, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xe8, 0xb0, 0x92, 0xf7, 0x01,
	0x00, 0x00,
}
